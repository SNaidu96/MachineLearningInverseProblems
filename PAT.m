% % Solve a Pattern Recognition Problem with a Neural Network
% % Script generated by Neural Pattern Recognition app
% % Created 15-Feb-2024 22:36:01
% %
% % This script assumes these variables are defined:
% %
% %   Data_Input - input data.
% %   Data_Output - target data.
% 
x = Data_Input';
t = Data_Output';
% 
% % Choose a Training Function
% % For a list of all training functions type: help nntrain
% % 'trainlm' is usually fastest.
% % 'trainbr' takes longer but may be better for challenging problems.
% % 'trainscg' uses less memory. Suitable in low memory situations.
 trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.
% 
% % Create a Pattern Recognition Network
 hiddenLayerSize = 16;
 net = patternnet(8, trainFcn);
 net.performFcn = 'crossentropy';
% % Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 10/100;
net.trainParam.max_fail = 100;
% net.trainParam.epochs=1e5;
 net.performParam.regularization =0.25 ;
 %net.performParam.normalization = 'standard';
net.trainParam.min_grad = 1e-20;
% Train the Network
[net,tr] = train(net,x,t);


%net.trainParam.goal = 1e-10;
% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
% figure, ploterrhist(e)
figure, plotconfusion(t,y)
%figure, plotroc(t,y)

